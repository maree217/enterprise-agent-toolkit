"""add_rbac

Revision ID: cd8d7f25f9cf
Revises: e3a006cc9152
Create Date: 2025-06-10 11:37:43.841167

"""

import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "cd8d7f25f9cf"
down_revision = "e3a006cc9152"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "group",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("is_system_group", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_group_name"), "group", ["name"], unique=True)
    op.create_table(
        "resource",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("resource_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_resource_name"), "resource", ["name"], unique=True)
    op.create_table(
        "role",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("is_system_role", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("parent_role_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["parent_role_id"],
            ["role.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_role_name"), "role", ["name"], unique=True)
    op.create_table(
        "groupresource",
        sa.Column("group_id", sa.Integer(), nullable=False),
        sa.Column("resource_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["group.id"],
        ),
        sa.ForeignKeyConstraint(
            ["resource_id"],
            ["resource.id"],
        ),
        sa.PrimaryKeyConstraint("group_id", "resource_id"),
    )
    op.create_table(
        "rbacauditlog",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "timestamp",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("actor_id", sa.Integer(), nullable=False),
        sa.Column("action", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("target_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("target_id", sa.Integer(), nullable=False),
        sa.Column("details", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(
            ["actor_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "roleaccess",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.Column("resource_id", sa.Integer(), nullable=False),
        sa.Column(
            "action",
            sa.Enum(
                "CREATE",
                "READ",
                "UPDATE",
                "DELETE",
                "EXECUTE",
                "MANAGE",
                name="actiontype",
            ),
            nullable=False,
        ),
        sa.Column(
            "scope",
            sa.Enum("GLOBAL", "TEAM", "PERSONAL", name="accessscope"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["resource_id"],
            ["resource.id"],
        ),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["role.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "usergroup",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("group_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["group.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "group_id"),
    )
    op.create_table(
        "userrole",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["role.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "role_id"),
    )
    op.add_column("graph", sa.Column("resource_id", sa.Integer(), nullable=False))
    op.create_foreign_key(None, "graph", "resource", ["resource_id"], ["id"])
    op.add_column("skill", sa.Column("resource_id", sa.Integer(), nullable=False))
    op.create_foreign_key(None, "skill", "resource", ["resource_id"], ["id"])
    op.add_column("subgraph", sa.Column("resource_id", sa.Integer(), nullable=False))
    op.create_foreign_key(None, "subgraph", "resource", ["resource_id"], ["id"])
    op.add_column("team", sa.Column("resource_id", sa.Integer(), nullable=False))
    op.create_foreign_key(None, "team", "resource", ["resource_id"], ["id"])
    op.add_column("upload", sa.Column("resource_id", sa.Integer(), nullable=False))
    op.create_foreign_key(None, "upload", "resource", ["resource_id"], ["id"])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "upload", type_="foreignkey")
    op.drop_column("upload", "resource_id")
    op.drop_constraint(None, "team", type_="foreignkey")
    op.drop_column("team", "resource_id")
    op.drop_constraint(None, "subgraph", type_="foreignkey")
    op.drop_column("subgraph", "resource_id")
    op.drop_constraint(None, "skill", type_="foreignkey")
    op.drop_column("skill", "resource_id")
    op.drop_constraint(None, "graph", type_="foreignkey")
    op.drop_column("graph", "resource_id")
    op.drop_table("userrole")
    op.drop_table("usergroup")
    op.drop_table("roleaccess")
    op.drop_table("rbacauditlog")
    op.drop_table("groupresource")
    op.drop_index(op.f("ix_role_name"), table_name="role")
    op.drop_table("role")
    op.drop_index(op.f("ix_resource_name"), table_name="resource")
    op.drop_table("resource")
    op.drop_index(op.f("ix_group_name"), table_name="group")
    op.drop_table("group")
    # ### end Alembic commands ###
